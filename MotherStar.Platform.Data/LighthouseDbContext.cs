// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>

using Microsoft.Extensions.Configuration;
using MotherStar.Platform.Domain.SEO.Lighthouse.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using RCommon.Persistence.EFCore;
using System;
using System.Collections.Generic;
using Microsoft.Extensions.Logging;
using RCommon.Entities;
using MotherStar.Platform.Domain;

namespace MotherStar.Platform.Data
{
    public partial class LighthouseDbContext : RCommonDbContext
    {
        private readonly IConfiguration _configuration;
        private readonly ILoggerFactory _loggerFactory;

        public LighthouseDbContext(DbContextOptions<LighthouseDbContext> options) 
            : base(options)
        {
            
        }

        public LighthouseDbContext(DbContextOptions<LighthouseDbContext> options, IConfiguration configuration, ILoggerFactory loggerFactory) 
            : base(options)
        {
            if (options is null)
            {
                throw new ArgumentNullException(nameof(options));
            }

            _configuration = configuration ?? throw new ArgumentNullException(nameof(configuration));
            _loggerFactory = loggerFactory ?? throw new ArgumentNullException(nameof(loggerFactory));
        }

        public virtual DbSet<LighthouseProfile> LighthouseCustomers { get; set; }
        public virtual DbSet<PageAudit> PageAudits { get; set; }
        public virtual DbSet<PageAuditItem> PageAuditItems { get; set; }
        public virtual DbSet<PageAuditRequest> PageAuditRequests { get; set; }
        public virtual DbSet<Status> Statuses { get; set; }
        public virtual DbSet<StatusType> StatusTypes { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.ApplyConfiguration(new Configurations.LighthouseProfileConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.PageAuditConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.PageAuditItemConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.PageAuditRequestConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.StatusConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.StatusTypeConfiguration());

            OnModelCreatingPartial(modelBuilder);
        }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured && _configuration != null)

            {
                var connectionString = _configuration.GetConnectionString(DataStoreNamesConst.LighthouseDb);
                var logger = _loggerFactory.CreateLogger(nameof(LighthouseDbContext));
                logger.LogDebug("Connection string: {0}", connectionString);
                optionsBuilder.UseNpgsql(connectionString);
                optionsBuilder.UseLoggerFactory(this._loggerFactory);
            }
            
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}
